#version 430
layout (local_size_x = 1) in;

layout(std140, binding = 0) uniform RotatorLerp {
    vec4 a;
    vec4 b;
    float t;
    vec3 pad; // padding
} ubo;

layout(std430, binding = 1) buffer Result {
    vec4 rotated;
};

// 회전 벡터 (초기값)
const vec3 origin = vec3(0.0, 0.5, 0.0);
// const vec3 origin = vec3(0.0, 0.0, -0.5);
// const vec3 origin = vec3(1.0, 0.0, 0.0);

// 단순 slerp 구현
vec4 quat_slerp(vec4 qa, vec4 qb, float t) {
    float cos_theta = dot(qa, qb);
    if (cos_theta < 0.0) {
        qb = -qb;
        cos_theta = -cos_theta;
    }

    float k0, k1;
    if (cos_theta > 0.9995) {
        k0 = 1.0 - t;
        k1 = t;
    } else {
        float theta = acos(cos_theta);
        float sin_theta = sin(theta);
        k0 = sin((1.0 - t) * theta) / sin_theta;
        k1 = sin(t * theta) / sin_theta;
    }
    return normalize(k0 * qa + k1 * qb);
}

// 쿼터니언으로 벡터 회전
vec3 quat_rotate(vec4 q, vec3 v) {
    vec3 u = q.xyz;
    float s = q.w;
    return 2.0 * dot(u, v) * u
         + (s*s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

void main() {
    vec4 q = quat_slerp(ubo.a, ubo.b, ubo.t);
    vec3 result = quat_rotate(q, origin);
    rotated = vec4(result, 1.0);
}